### THIS FILE IS GENERATED AUTOMATICALLY
### DO NOT MODIFY IT DIRECTLY
### USE ./build-ci.sh INSTEAD

stages:
  - build
  - test
  - release

before_script:
  - docker login -u $DOCKER_USER -p $DOCKER_PASS

variables:

  IMAGE: dbogatov/docker-images

  BLC_TEST: $IMAGE:blc-$CI_BUILD_REF_NAME
  BLC_RELEASE: $IMAGE:blc-latest

  DEBIAN_TEST: $IMAGE:debian-$CI_BUILD_REF_NAME
  DEBIAN_RELEASE: $IMAGE:debian-latest

  GULP_BOWER_TEST: $IMAGE:gulp-bower-$CI_BUILD_REF_NAME
  GULP_BOWER_RELEASE: $IMAGE:gulp-bower-latest

  JEKYLL_TEST: $IMAGE:jekyll-$CI_BUILD_REF_NAME
  JEKYLL_RELEASE: $IMAGE:jekyll-latest

  MK_DOCS_TEST: $IMAGE:mk-docs-$CI_BUILD_REF_NAME
  MK_DOCS_RELEASE: $IMAGE:mk-docs-latest

  NET_CORE_TEST: $IMAGE:net-core-$CI_BUILD_REF_NAME
  NET_CORE_RELEASE: $IMAGE:net-core-latest

  NGINX_TEST: $IMAGE:nginx-$CI_BUILD_REF_NAME
  NGINX_RELEASE: $IMAGE:nginx-latest

  PHP_TEST: $IMAGE:php-$CI_BUILD_REF_NAME
  PHP_RELEASE: $IMAGE:php-latest

  TIDY_TEST: $IMAGE:tidy-$CI_BUILD_REF_NAME
  TIDY_RELEASE: $IMAGE:tidy-latest


### BLC

blc-build:
  stage: build
  script:
    - docker build --pull -t $BLC_TEST images/blc
    - docker push $BLC_TEST
  tags:
    - shell

blc-test:
  stage: test
  script:
    - docker pull $BLC_TEST
    - docker run -v $CI_PROJECT_DIR/images/blc/test.sh:/test.sh --entrypoint="/bin/bash" $BLC_TEST /test.sh
  tags:
    - shell

blc-release:
  stage: release
  script:
    - docker pull $BLC_TEST
    - docker tag $BLC_TEST $BLC_RELEASE
    - docker push $BLC_RELEASE
  only:
    - master
  tags:
    - shell


### DEBIAN

debian-build:
  stage: build
  script:
    - docker build --pull -t $DEBIAN_TEST images/debian
    - docker push $DEBIAN_TEST
  tags:
    - shell

debian-test:
  stage: test
  script:
    - docker pull $DEBIAN_TEST
    - docker run -v $CI_PROJECT_DIR/images/debian/test.sh:/test.sh --entrypoint="/bin/bash" $DEBIAN_TEST /test.sh
  tags:
    - shell

debian-release:
  stage: release
  script:
    - docker pull $DEBIAN_TEST
    - docker tag $DEBIAN_TEST $DEBIAN_RELEASE
    - docker push $DEBIAN_RELEASE
  only:
    - master
  tags:
    - shell


### GULP-BOWER

gulp-bower-build:
  stage: build
  script:
    - docker build --pull -t $GULP_BOWER_TEST images/gulp-bower
    - docker push $GULP_BOWER_TEST
  tags:
    - shell

gulp-bower-test:
  stage: test
  script:
    - docker pull $GULP_BOWER_TEST
    - docker run -v $CI_PROJECT_DIR/images/gulp-bower/test.sh:/test.sh --entrypoint="/bin/bash" $GULP_BOWER_TEST /test.sh
  tags:
    - shell

gulp-bower-release:
  stage: release
  script:
    - docker pull $GULP_BOWER_TEST
    - docker tag $GULP_BOWER_TEST $GULP_BOWER_RELEASE
    - docker push $GULP_BOWER_RELEASE
  only:
    - master
  tags:
    - shell


### JEKYLL

jekyll-build:
  stage: build
  script:
    - docker build --pull -t $JEKYLL_TEST images/jekyll
    - docker push $JEKYLL_TEST
  tags:
    - shell

jekyll-test:
  stage: test
  script:
    - docker pull $JEKYLL_TEST
    - docker run -v $CI_PROJECT_DIR/images/jekyll/test.sh:/test.sh --entrypoint="/bin/bash" $JEKYLL_TEST /test.sh
  tags:
    - shell

jekyll-release:
  stage: release
  script:
    - docker pull $JEKYLL_TEST
    - docker tag $JEKYLL_TEST $JEKYLL_RELEASE
    - docker push $JEKYLL_RELEASE
  only:
    - master
  tags:
    - shell


### MK-DOCS

mk-docs-build:
  stage: build
  script:
    - docker build --pull -t $MK_DOCS_TEST images/mk-docs
    - docker push $MK_DOCS_TEST
  tags:
    - shell

mk-docs-test:
  stage: test
  script:
    - docker pull $MK_DOCS_TEST
    - docker run -v $CI_PROJECT_DIR/images/mk-docs/test.sh:/test.sh --entrypoint="/bin/bash" $MK_DOCS_TEST /test.sh
  tags:
    - shell

mk-docs-release:
  stage: release
  script:
    - docker pull $MK_DOCS_TEST
    - docker tag $MK_DOCS_TEST $MK_DOCS_RELEASE
    - docker push $MK_DOCS_RELEASE
  only:
    - master
  tags:
    - shell


### NET-CORE

net-core-build:
  stage: build
  script:
    - docker build --pull -t $NET_CORE_TEST images/net-core
    - docker push $NET_CORE_TEST
  tags:
    - shell

net-core-test:
  stage: test
  script:
    - docker pull $NET_CORE_TEST
    - docker run -v $CI_PROJECT_DIR/images/net-core/test.sh:/test.sh --entrypoint="/bin/bash" $NET_CORE_TEST /test.sh
  tags:
    - shell

net-core-release:
  stage: release
  script:
    - docker pull $NET_CORE_TEST
    - docker tag $NET_CORE_TEST $NET_CORE_RELEASE
    - docker push $NET_CORE_RELEASE
  only:
    - master
  tags:
    - shell


### NGINX

nginx-build:
  stage: build
  script:
    - docker build --pull -t $NGINX_TEST images/nginx
    - docker push $NGINX_TEST
  tags:
    - shell

nginx-test:
  stage: test
  script:
    - docker pull $NGINX_TEST
    - docker run -v $CI_PROJECT_DIR/images/nginx/test.sh:/test.sh --entrypoint="/bin/bash" $NGINX_TEST /test.sh
  tags:
    - shell

nginx-release:
  stage: release
  script:
    - docker pull $NGINX_TEST
    - docker tag $NGINX_TEST $NGINX_RELEASE
    - docker push $NGINX_RELEASE
  only:
    - master
  tags:
    - shell


### PHP

php-build:
  stage: build
  script:
    - docker build --pull -t $PHP_TEST images/php
    - docker push $PHP_TEST
  tags:
    - shell

php-test:
  stage: test
  script:
    - docker pull $PHP_TEST
    - docker run -v $CI_PROJECT_DIR/images/php/test.sh:/test.sh --entrypoint="/bin/bash" $PHP_TEST /test.sh
  tags:
    - shell

php-release:
  stage: release
  script:
    - docker pull $PHP_TEST
    - docker tag $PHP_TEST $PHP_RELEASE
    - docker push $PHP_RELEASE
  only:
    - master
  tags:
    - shell


### TIDY

tidy-build:
  stage: build
  script:
    - docker build --pull -t $TIDY_TEST images/tidy
    - docker push $TIDY_TEST
  tags:
    - shell

tidy-test:
  stage: test
  script:
    - docker pull $TIDY_TEST
    - docker run -v $CI_PROJECT_DIR/images/tidy/test.sh:/test.sh --entrypoint="/bin/bash" $TIDY_TEST /test.sh
  tags:
    - shell

tidy-release:
  stage: release
  script:
    - docker pull $TIDY_TEST
    - docker tag $TIDY_TEST $TIDY_RELEASE
    - docker push $TIDY_RELEASE
  only:
    - master
  tags:
    - shell

